# This is a file of useful commands associated with Roundup.  Enjoy.  -TFD


#############################
# DEPLOYING CODE TO A DATASET
#############################
# Datasets run off their own code.  Since they are so long running we do not want changes in the code for dev/prod to affect the computation.
# deploy from laptop to orchestra
cd ~/work/roundup && ./build.py --deployenv=orch_dev 
# deploy from webapp to dataset
ssho 
rsync -avz /www/dev.roundup.hms.harvard.edu/webapp /groups/cbi/roundup/201106_dataset_code/.


################################
# VERSION CONTROL AND DEPLOYMENT
################################

# deploy code to dev or prod
python build.py --deployenv=orch_dev
python build.py --deployenv=orch_prod


# commit changes, push to orchestra repo, and move changes from master (dev) branch to the production branch
git commit -a
git push
git checkout prod
git merge --no-ff master
git tag -a release_2.0.2 -m 'performance enhancements for sources page and getting genomes for dropdown boxes.'
git push
git checkout master


###########################
# RUNNING A DEV COMPUTATION
###########################

[todo] roundup uniprot: drop in genomes from current roundup to test a small computation and compare results with current roundup.
[done] had to change the file names, b/c genomes are 'foo', not 'foo.aa', and fasta/index files are 'foo.faa', not 'foo.aa'.  
had to split job orthologs into individual files to compare against old files in current roundup.
results are all the same!

# copy current roundup genomes to test dataset
cp -vpr /groups/rodeo/roundup/genomes/current/Mycoplasma_* /groups/cbi/td23/roundup_uniprot/test_dataset/genomes/.
# choose a few genomes to compare and put them in the test dataset metadata
"Mycoplasma_synoviae_53",
"Mycoplasma_pneumoniae",
"Mycoplasma_mycoides",
"Mycoplasma_genitalium"
# change the .aa to .faa.  This is what happens when you change naming conventions!
python -c 'import re, subprocess, os, roundup_dataset;
ds = "/groups/cbi/td23/roundup_uniprot/test_dataset"
genomes = roundup_dataset.getGenomes(ds)
for genome in genomes:
  gd = roundup_dataset.getGenomesDir(ds)
  badGenomeDir = os.path.join(gd, genome+".aa")
  genomeDir = roundup_dataset.getGenomePath(genome, ds)
  print ds
  print genome
  print badGenomeDir
  print genomeDir
  if os.path.exists(badGenomeDir):
    cmd = "mv {} {}".format(badGenomeDir, genomeDir)
    print cmd
    subprocess.check_call(cmd, shell=True)
  if os.path.exists(genomeDir):
    for file in [os.path.join(genomeDir, f) for f in os.listdir(genomeDir)]:
      print file
      if file.find(".aa") > -1:
        newFile = re.sub("\.aa", ".faa", file)
        print newFile
        cmd = "mv {} {}".format(file, newFile)
        print cmd
        # subprocess.check_call(cmd, shell=True)
'
# remove existing jobs
rm -rf /groups/cbi/td23/roundup_uniprot/test_dataset/jobs/*
# drop completes table so jobs will run
echo 'drop table key_value_store_roundup_ds_test_dataset' | mysql devroundup
# remove prepare computation  complete too
emacs /groups/cbi/td23/roundup_uniprot/test_dataset/steps.complete.txt
# prepare jobs
python -c 'import roundup_dataset;
ds = "/groups/cbi/td23/roundup_uniprot/test_dataset"
roundup_dataset.prepareComputation(ds, numJobs=4)'
# results
job = job_0 start = 0 end = 2
jobPairs= [('Mycoplasma_pneumoniae', 'Mycoplasma_synoviae_53'), ('Mycoplasma_mycoides', 'Mycoplasma_pneumoniae')]
job = job_1 start = 2 end = 4
jobPairs= [('Mycoplasma_genitalium', 'Mycoplasma_synoviae_53'), ('Mycoplasma_mycoides', 'Mycoplasma_synoviae_53')]
job = job_2 start = 4 end = 5
jobPairs= [('Mycoplasma_genitalium', 'Mycoplasma_pneumoniae')]
job = job_3 start = 5 end = 6
jobPairs= [('Mycoplasma_genitalium', 'Mycoplasma_mycoides')]
# run jobs
python -c 'import roundup_dataset;
ds = "/groups/cbi/td23/roundup_uniprot/test_dataset"
roundup_dataset.computeJobs(ds)'

# split new orthologs into results files.
python -c 'import roundup_dataset;
ds = "/groups/cbi/td23/roundup_uniprot/test_dataset"
roundup_dataset.splitOrthologsIntoOldResultsFiles(ds, "/home/td23/tmp/test_dataset")'

# compare with existing results files:
python -c 'import roundup_dataset, roundup_common, os, subprocess;
ds = "/groups/cbi/td23/roundup_uniprot/test_dataset"
for qdb, sdb in roundup_dataset.getPairs(ds):
  for div, evalue in roundup_common.genDivEvalueParams():
    old = roundup_common.makeRoundupResultsCachePath(qdb+".aa", sdb+".aa", div, evalue, "/groups/rodeo/roundup/results/current")
    new = "/home/td23/tmp/test_dataset/{}.aa_{}.aa_{}_{}".format(qdb, sdb, div, evalue)
    print old, os.path.exists(old)
    print new, os.path.exists(new)
    subprocess.check_call("cp {} foo.old".format(old), shell=True)
    subprocess.check_call("cp {} foo.new".format(new), shell=True)
    print subprocess.check_output("diff foo.old foo.new", shell=True)
'
# all the results are the same!  It works!  Here is a sample:
/groups/rodeo/roundup/results/current/44/d3/Mycoplasma_genitalium.aa_Mycoplasma_mycoides.aa_0.2_1e-5 True
/home/td23/tmp/test_dataset/Mycoplasma_genitalium.aa_Mycoplasma_mycoides.aa_0.2_1e-5 True

/groups/rodeo/roundup/results/current/44/d3/Mycoplasma_genitalium.aa_Mycoplasma_mycoides.aa_0.2_1e-10 True
/home/td23/tmp/test_dataset/Mycoplasma_genitalium.aa_Mycoplasma_mycoides.aa_0.2_1e-10 True

/groups/rodeo/roundup/results/current/44/d3/Mycoplasma_genitalium.aa_Mycoplasma_mycoides.aa_0.2_1e-15 True
/home/td23/tmp/test_dataset/Mycoplasma_genitalium.aa_Mycoplasma_mycoides.aa_0.2_1e-15 True

