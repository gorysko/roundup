<project name="roundup" default="all" basedir=".">
   
  <!-- 
  usage: ant [-Ddeploy.env=dev|prod] [target1] [target2] ...
  The default deployment environment is the "dev" instance.
  To deploy to production, specify the deploy.env property on the command line.
  example usage commands:
    do a "clean" deploy to dev: ant
    do a "quick" deploy to dev: ant deploy
    deploy to prod: ant -Ddeploy.env=prod

  warning: because of permissions issues, all copying, mkdir, etc., is followed by adding group write permissions to whatever files or dirs have been copied.
    this is not pretty, but there have been consistent deployment problems where one person will deploy and because their umask is set wrong or
    for some other reason, group write perms are not set on some files or dirs.  This makes it impossible for another person to do a clean deploy without
    the help of the first person or and administrator (RITG).  This has resulted in delays in fixing broken production code, etc., many times.
  A better (and more sophisticated) fix would be to deploy with a server like Hudson or Bamboo, so all files are always deployed by the user the server runs as.
  -->

  <description>
  deployment for Roundup to /www/{dev.}roundup.hms.harvard.edu AND /groups/rodeo/{dev.}roundup
  </description>


  <!-- PROPERTIES -->
  <!-- sets deploy.env to dev unless deploy.env is specified on the command line as prod -->
  <property name="deploy.env" value="dev"/>   
  <condition property="web.deploy.env" value="prod" else="dev"> 
    <equals arg1="${deploy.env}" arg2="prod"/> 
  </condition> 
  <condition property="web.root" value="/www/roundup.hms.harvard.edu" else="/www/dev.roundup.hms.harvard.edu"> 
    <equals arg1="${web.deploy.env}" arg2="prod"/> 
  </condition> 

  <!-- new roundup organization -->
  <!--  <property name="cluster.root" value="/groups/rodeo/deploy/${deploy.env}/roundup" /> -->
  <condition property="cluster.root" value="/groups/rodeo/roundup" else="/groups/rodeo/dev.roundup"> 
    <equals arg1="${web.deploy.env}" arg2="prod"/> 
  </condition> 




  <!-- PATTERN SETS -->
  <!-- 
  used to determine which files and dirs get copied and which get ignored.
  Also used to determine which files to change to executable permissions, since
  ant does not maintain permissions when it copies.
  -->
  <patternset id="web.excludes.ps">
    <exclude name="**/old"/> 
    <exclude name="**/old/**"/> 
    <exclude name="**/semantic.cache"/> 
    <exclude name="**/.svn"/> 
    <exclude name="**/.svn/**"/> 
    <exclude name="**/*.pyc"/> 
    <exclude name="**/*.pyo"/>
    <exclude name=".htaccess.*"/> 
  </patternset>
  <patternset id="python.ps">
    <include name="**/*.py"/> 
    <exclude name="**/old"/> 
    <exclude name="**/old/**"/> 
    <exclude name="**/semantic.cache"/> 
    <exclude name="**/.svn"/> 
    <exclude name="**/.svn/**"/> 
    <exclude name="**/*.pyc"/> 
    <exclude name="**/*.pyo"/> 
  </patternset>


  <!-- TARGETS -->
  <target name="init">
    <echo message="java version: ${ant.java.version}"/>
    <echo message="web.root=${web.root}"/>
    <echo message="cluster.root=${cluster.root}"/>
    <!-- Create the time stamp -->
    <tstamp/>
    <mkdir dir="${web.root}/docroot"/>
    <mkdir dir="${web.root}/support"/>
    <mkdir dir="${cluster.root}"/>
    <!-- add group write perms to dirs and files to avoid deployment problems when deploying over another person. -->
    <exec executable="chmod">
      <arg value="g+rw" />
      <arg value="${web.root}/docroot" />
      <arg value="${web.root}/support" />
      <arg value="${cluster.root}" />
    </exec>

    <!-- new roundup organization -->
    <mkdir dir="${cluster.root}/python"/>
    <mkdir dir="${cluster.root}/config"/>
    <mkdir dir="${cluster.root}/log"/>
    <mkdir dir="${cluster.root}/datasets"/>
    <mkdir dir="${cluster.root}/results"/>
    <mkdir dir="${cluster.root}/genomes"/>
    <mkdir dir="${cluster.root}/compute"/>
    <mkdir dir="${cluster.root}/tmp"/>
    <exec executable="chmod">
      <arg value="g+rw" />
      <arg value="${cluster.root}/python" />
      <arg value="${cluster.root}/config" />
      <arg value="${cluster.root}/log" />
      <arg value="${cluster.root}/datasets" />
      <arg value="${cluster.root}/results" />
      <arg value="${cluster.root}/genomes" />
      <arg value="${cluster.root}/compute" />
      <arg value="${cluster.root}/tmp" />
    </exec>
    <exec executable="chmod">
      <arg value="ugo+rwx" />
      <arg value="${cluster.root}/tmp" />
    </exec>
  </target>


  <target name="clean" description="remove deployed files" depends="init">
    <delete includeEmptyDirs="true">
    <!-- ignore the drupal code dir -->
      <fileset dir="${web.root}" includes="**/*" excludes="**/docroot/site/**" defaultexcludes="no"/>
    </delete>

    <delete includeEmptyDirs="true">
      <!-- new roundup organization -->
      <!-- <fileset dir="${cluster.root}" includes="**/*" defaultexcludes="no"/> -->
      <!-- only clean code and configuration.  do not clean data dirs like datasets, genomes, results, log, compute, tmp. -->
      <fileset dir="${cluster.root}/python" includes="**/*" defaultexcludes="no"/>
      <fileset dir="${cluster.root}/config" includes="**/*" defaultexcludes="no"/>
    </delete>
  </target>


  <target name="deploy" depends="init">
      <copy todir="${web.root}">
          <fileset dir="${basedir}/www" casesensitive="yes">
	    <patternset refid="web.excludes.ps"/>
	  </fileset>
      </copy>
      <!-- add group write perms to dirs and files to avoid deployment problems when deploying over another person. -->
      <!-- the ant chmod task only operates on files, not directories, so use 'exec' instead. -->
      <exec executable="find">
	    <arg value="${web.root}" />
        <arg value="-path" />
        <arg value="${web.root}/docroot/site" />
        <arg value="-prune" />
        <arg value="-o" />
        <arg value="-exec" />
        <arg value="chmod" />
        <arg value="g+rw" />
        <arg value="{}" />
        <arg value=";" />
      </exec>

      <!-- prod and dev envs have different .htaccess files.  conditionally copy and rename the right one. -->
      <copy file="${basedir}/www/.htaccess.${web.deploy.env}" tofile="${web.root}/.htaccess" />
      <!-- add group write perms to dirs and files to avoid deployment problems when deploying over another person. -->
      <chmod perm="g+rw" file="${web.root}/.htaccess"/>

      <!-- mush the python, xml, and other files into the deployment dir for non-php code and configuration. -->
      <copy todir="${cluster.root}/python">
          <fileset dir="${basedir}/python" casesensitive="yes">
	    <patternset refid="python.ps"/>
	  </fileset>
      </copy>
      <copy todir="${cluster.root}/config">
	  <fileset dir="${basedir}/config" casesensitive="yes">
	    <patternset refid="web.excludes.ps"/>
	  </fileset>
      </copy>
      <!-- add group write perms to dirs and files to avoid deployment problems when deploying over another person. -->
      <exec executable="find">
	    <arg value="${cluster.root}/python" />
	    <arg value="${cluster.root}/config" />
        <arg value="-exec" />
        <arg value="chmod" />
        <arg value="g+rw" />
        <arg value="{}" />
        <arg value=";" />
      </exec>
      <!-- add executable perms to python scripts, b/c a few of them _might_ be used as executables -->
      <chmod perm="775">
	    <fileset dir="${cluster.root}/python">
	      <patternset refid="python.ps"/>
	    </fileset>
      </chmod>

  </target>

  <target name="all" depends="init,clean,deploy"/>

</project>
