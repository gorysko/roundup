README file for rsd_algorithm
author: Dennis P. Wall -- Department of Biological Sciences, Stanford University.
Date of readme file creation: 03_03_03

This program is an improved algorithm for detecting putative orthologs between two genomes, to be published in Bioinformatics soon... 

Necessary modules are the following:
1.ReadFasta.py
2.BioUtilities.py
3.Utility.py

4.Necessary Perl script : clustal2phylip 

*Each of those files should be left in the same directory, and will be once you expand the RSDalgorithm.zip file from the following website: charles.stanford.edu/~dennis/research.html
*Currently your BioUtilities.py file has a module to run clustal2phylip.  the path to this is specified as ~/_RSD/clustal2phylip.  should you need to change your path, you will need to reflect that change here unless you place it in /usr/bin or /usr/local/bin. 

IMPORTANT STEPS:

1) get python, paml, clustalw, and the wu-blast packages:
*install these as root
python and intsallation instructions: http://python.org/2.2.2/
paml and installation instructions: http://abacus.gene.ucl.ac.uk/software/paml.html
clustalw: ftp://ftp-igbmc.u-strasbg.fr/pub/ClustalW/        (for UNIX use: clustalw1.83.UNIX.tar.gz)
wu-blast: http://sapiens.wustl.edu/blast/blast/executables/
wu-blast installation notes: http://blast.wustl.edu/blast/README.html#Installation


2) get your FASTA formatted Genomes that you care to analyze and ensure that each fasta entry of the query has a unique prefix identifier. That identifier is your "id" in the rsd.ctl file (see below). Also ensure that none of your >name fields of the fasta file has a pipe "|" character. this character may be treated as "or" in python regular expressions and may affect the output.

formatting your fastafiles  may not always be so straightforward... I am including in the RSD_algorithm download a program that will format your database for you, but only if your database has the standard ">gi|123456|" name field format... Still, the logic in that little script
is pretty basic, so you should be able to figure out ways to change it to meet your needs which are 1) that the names have a prefix and no pipes, and 2) that each name is different (otherwise xdformat/xdget described below will not work properly), and not too long


an example of the format_your_fasta.py script:

dpwall@razor% ls
BioUtilities.py  BioUtilities.pyc  README  RSD_algorithm.py  ReadFasta.py  ReadFasta.pyc  Utility.py  Utility.pyc  clustal2phylip  example_fasta  format_your_fasta.py  rsd.ctl codeml.ctl_cp

so that a list of all the files in your RSD folder.  The example_fasta has two proteins with name fields that look like this : >gi|3150511|gb|AAC17021| K10E9.1

at your prompt type "python format_your_fasta.py the_name_of_your_fasta the_name_of_your_new_fasta your_queryPrefix_identifier"
like so:

dpwall@razor% python format_your_fasta.py example_fasta newfasta CG



3)format your fasta dabases using XDFORMAT (http://sapiens.wustl.edu/blast/blast/executables/) e.g., type, xdformat -p -I "YOUR DATABASE NAME HERE" (for protein (-p) data). 

for example:
let's say you have a genome called dros.aa that you want to use as a query in your RSD calculations... 

type at your prompt...

dpwall@razor% xdformat -p -I dros.aa 
XDFORMAT-WashU 1.0 [07-Jun-2002] [linux-i686-ILP32F64 2002-06-07T16:28:42]
Start:  2003-03-13T11:54:39
Input: "dros.aa"
XDF Output Database:  dros.aa
 Alphabet:  NCBIstdaa(1)
 No. of sequences (letters) written:  17,670  (9,385,426)
 Longest sequence written (in database):  18,074  (18,074)
 Index entries written (in database):  17,670  (17,670)
Total cpu time:  0.32u 0.10s 0.42t  Elapsed: 00:00:02
End:  2003-03-13T11:54:41
dpwall@razor% ls
dros.aa  dros.aa.xpd  dros.aa.xpi  dros.aa.xps  dros.aa.xpt

now your database is formatted and ready for queries using the XDGET executable, which is wrapped into the RSD_algorithm

for example:

typing "xdget -p dros.aa CG10000" at the razor prompt yields the following:

dpwall@razor% xdget -p dros.aa CG10000
>CG10000
MLLRTIVSLLSRSPEDYLHELILVDDGSQRDVTLLDDLKRWMGGVFGSRYRLGLTFLRNQ
ERMGLIWSRNRGASLASGRYVLFLDSHCEVNEGWLEPLLERLALNTNLAVSPLLDPIDPT
TLSYRKGNELLKGGFDWSLHFHWLKRQLTNQESLEMPYQSPAFAGGVLMMSREWFLKLGS
FNPYLKIWGGESIELAIKLWLCGGQIEIVPCSRIGHIFRRRHAFDFPPQSDRQLSPAQET
YLHNSKIIAESWLDEYKNMFYALRPAARRIPLDHTYDELQRMRKERRCHPFEWYLRHVSP
ELRMHFDELSATGTLRNEDRCVHARQKDSQPILASCYLSDITQWSMLRQSGQLSTHRELC
LAVGFGMRIALEPCGRNETVRRSQRWVRLGTHLLHAESHLCLDNPLKDRLEMSTCRSHAV
SQSFQFALEMEGQT


4) set up your rsd.ctl file, and example of this is included in your download.

The program comes with a .ctl file that contains a series of parameters that will likely require changes by the user. 

>>EXAMPLE.CTL_FILE
db
db2
threshold
divergence
id
path
output

****
db = path to your query database (fasta formatted and xdformatted)
db2 = path to you subject database (fasta formatted and xdformatted)
threshold = 1e-15, 1e-20, etc. your desired blast cutoff
id = your query prefix identifier
divergence = percentage sequence mis-alignment not to be exceeded, default = 0.2
path = path to the paml program folder containing codeml, codeml.ctl, and jones.dat
output = your desired output file name
****


4.) place codeml, codeml.ctl, and jones.dat into a directory that is specified by your path in the .ctl file.  Then rename the codeml.ctl as codeml.ctl_cp.
    The RSDalgorithm program will need to look for this codeml.ctl_cp, and change it iteratively with each new query-subect pair.

    *an example of the codeml.ctl_cp file should be included in your _RSD folder. This one should work fine, though you may want to change the shape parameter for the gamma distribution.

5.) finally to run the program type at the command prompt:

	dpwall@razor% python RSD_algorithm.py rsd.ctl fasta_file_X

	where fasta_file_X is either a path to your entire query genome or a set of genes from your query genome (in fasta format).


Additionals:
A user may also care to change the alpha shape parameter for the gamma distribution used in the likelihood calculations of the codeml package of paml.  This must be done in the codeml.ctl_cp.




